"use strict";
(self["webpackChunkmyapp"] = self["webpackChunkmyapp"] || []).push([["vendors-node_modules_ocdla_view_view_js"],{

/***/ "./node_modules/@ocdla/view/view.js":
/*!******************************************!*\
  !*** ./node_modules/@ocdla/view/view.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   View: () => (/* binding */ View),
/* harmony export */   getResult: () => (/* binding */ getResult),
/* harmony export */   useEffect: () => (/* binding */ useEffect),
/* harmony export */   vNode: () => (/* binding */ vNode)
/* harmony export */ });
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * @ocdladefense/view
 *
 * @description Here is my description.
 *
 *
 *
 */

// Array of functions that will be executed before each view is rendered.
var effectsFns = {};

// Object containing the results of each effect function.
var results = {};

// import { CACHE, HISTORY } from "./cache.js";

function useEffect(key, fn) {
  effectsFns[key] = fn;
}
function getResult(key) {
  return results[key];
}
function resolveEffects() {
  return _resolveEffects.apply(this, arguments);
}
/**
 * @class View
 *
 * This is a description of the View class.
 */
function _resolveEffects() {
  _resolveEffects = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var foobar, _results, i, _i, _Object$keys, key;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          foobar = Object.values(effectsFns);
          _context2.next = 3;
          return Promise.all(foobar.map(function (fn) {
            return fn();
          }));
        case 3:
          _results = _context2.sent;
          i = 0;
          for (_i = 0, _Object$keys = Object.keys(effectsFns); _i < _Object$keys.length; _i++) {
            key = _Object$keys[_i];
            results[key] = _results[i++];
          }
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _resolveEffects.apply(this, arguments);
}
var View = function () {
  var NODE_CHANGED_STATES = ['NODE_NO_COMPARISON', 'NODE_DIFFERENT_TYPE', 'NODE_NOT_EQUAL', 'NODE_DIFFERENT_ELEMENT', 'NODE_PROPS_CHANGED', 'TEXT_NODES_NOT_EQUAL'];

  /**
   * @constructs View
   * @param root
   */
  function View(root) {
    var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    this.root = root;
    this.shouldReplaceRoot = replace;
    //document.getElementById("order-history-main").addEventListener("click", myAppEventHandler);
    //root.addEventListener("click", myAppEventHandler);
  }

  /**
   * @memberof View
   * @method render
   * @instance
   * @description Perform an initial paint of a virtual node structure.
   * @param {Object} vNode A virtual node structure.
   */
  function render(_x) {
    return _render.apply(this, arguments);
  }
  function _render() {
    _render = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(vNode) {
      var $newNode;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            // Components can register effects to be run before rendering.
            // These should be understood as "this component needs the effect (or result) of exeecuting some function before it can render".
            // Components can then use the result of these functions through the getResult(key) function.
            // This also implies that components are at least evaluated twice at startup: once to register the effect and once to start the initial render.

            // Run through the component functions once to gather all the effects.
            evaluateEffects(vNode);
            _context.next = 3;
            return resolveEffects();
          case 3:
            console.log('Effects resolved.');
            console.log(results);

            // Note render the tree.
            this.currentTree = vNode;
            $newNode = createElement(vNode);
            this.root.innerHTML = "";
            if (this.shouldReplaceRoot) {
              this.root.replaceWith($newNode);
              this.root = $newNode;
            } else {
              this.root.appendChild($newNode);
            }
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    return _render.apply(this, arguments);
  }
  function update(newNode) {
    updateElement(this.root, newNode, this.currentTree);
    this.currentTree = newNode;
  }

  /**
   * @memberof View
   * @method updateElement
   * @instance
   * @description Perform an initial paint of a virtual node structure.
   * @param {DOMNode} $parent
   * @param {vNode} newNode Then new virtual node tree to be rendered.
   * @param {vNode} oldNode The old virtual node tree to be diffed.
   * @param {Integer} index The current index of a recursive structure.
   */
  function updateElement($parent, newNode, oldNode) {
    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var state = getChangeState(newNode, oldNode);

    // Whether to use replaceChild to swap nodes.
    var shouldSwapNodes = changed(state);

    // Whether this current evaluation is a synthetic node.
    var isSynthetic = newNode && typeof newNode.type === 'function';
    if ($parent.nodeType == 3) {
      return;
    }
    if (!oldNode) {
      var n = View.createElement(newNode);
      $parent.appendChild(n);
    } else if (!newNode) {
      if (!$parent.children[index]) {
        $parent.removeChild($parent.children[$parent.children.length - 1]);
      } else {
        $parent.removeChild($parent.children[index]);
      }
    } else if (isSynthetic) {
      if (newNode.type && newNode.type.prototype && newNode.type.prototype.render) {
        var obj = new newNode.type(newNode.props);
        newNode = obj.render();
      } else {
        newNode = typeof newNode.type === 'function' ? newNode.type(newNode.props) : newNode;
      }
      if (oldNode.type && oldNode.type.prototype && oldNode.type.prototype.render) {
        var _obj = new oldNode.type(oldNode.props);
        oldNode = _obj.render();
      } else oldNode = typeof oldNode.type === 'function' ? oldNode.type(oldNode.props) : oldNode;
      updateElement($parent, newNode, oldNode, index);
    } else if (!isSynthetic && shouldSwapNodes) {
      var _n = createElement(newNode);
      if (newNode.type) {
        $parent.replaceChild(_n, $parent.childNodes[index]);
      } else {
        $parent.replaceChild(_n, $parent.childNodes[index]);
      }
    }

    // Not obvious, but text nodes don"t have a type and should
    // have been handled before this block executes.
    else if (newNode.type && newNode.children) {
      var newLength = newNode.children.length;
      var oldLength = oldNode.children.length;
      for (var i = 0; i < newLength || i < oldLength; i++) {
        var nextParent = $parent.childNodes[index];
        var revisedNode = newNode.children[i];
        var expiredNode = oldNode.children[i];
        var equal = revisedNode == expiredNode;
        if (equal) continue;
        updateElement(nextParent, revisedNode, expiredNode, i);
      }
    }
  }
  function getChangeState(n1, n2) {
    if (n1 && !n2) return 'NODE_NO_COMPARISON';
    if (n1 == n2) return 'NODE_NO_CHANGE';

    // Comparing two text nodes that are obviously different.
    if (typeof n1 === 'string' && typeof n2 === 'string' && n1 !== n2) {
      return 'TEXT_NODES_NOT_EQUAL';
    }
    if (_typeof(n1) !== _typeof(n2)) {
      return 'NODE_DIFFERENT_TYPE';
    }
    if (n1.type !== n2.type) {
      return 'NODE_DIFFERENT_ELEMENT';
    }
    if (propsChanged(n1, n2)) {
      return 'NODE_PROPS_CHANGED';
    }
    if (n1 != n2) {
      return 'NODE_RECURSIVE_EVALUATE';
    }
    return 'NODE_NO_CHANGE';
  }
  function changed(state) {
    return NODE_CHANGED_STATES.includes(state);
  }
  function propsChanged(node1, node2) {
    var node1Props = node1.props;
    var node2Props = node2.props;
    if (_typeof(node1Props) != _typeof(node2Props)) {
      return true;
    }
    if (!node1Props && !node2Props) {
      return false;
    }
    var aProps = Object.getOwnPropertyNames(node1Props);
    var bProps = Object.getOwnPropertyNames(node2Props);
    if (aProps.length != bProps.length) {
      return true;
    }
    for (var i = 0; i < aProps.length; i++) {
      var propName = aProps[i];
      if (node1Props[propName] !== node2Props[propName]) {
        return true;
      }
    }
    return false;
  }
  View.prototype = {
    render: render,
    update: update,
    createElement: createElement
  };
  return View;
}();

/**
 * Return a View instance from the given DOM element or selector.
 *
 * @param {string} selector
 * @returns {View}
 */
View.createRoot = function (selector) {
  var shouldReplaceRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var elem = typeof selector == 'string' ? document.querySelector(selector) : selector;
  var root = elem.cloneNode(false);
  elem.parentElement.replaceChild(root, elem);
  return new View(root, shouldReplaceRoot);
};
function evaluateEffects(vnode) {
  return createElement(vnode);
}

/**
 * @memberof View
 * @method createElement
 * @description Recursively transform a virtual node structure into a DOM node tree.
 * @param {Object} vnode A virtual node structure.
 * @returns DOMElement
 */
function createElement(vnode) {
  if (typeof vnode === 'string' || typeof vnode === 'number') {
    return document.createTextNode(vnode.toString());
  }
  if (vnode.type == 'text') {
    return document.createTextNode(vnode.children);
  }
  //first check to see if component references a class name
  if (typeof vnode.type == 'function' && vnode.type.prototype && vnode.type.prototype.render) {
    console.log('vNode is a class reference');
    var obj = new vnode.type(vnode.props);
    var render = obj.render();
    var node = createElement(render);
    //BACKTO
    // Let the component know about its own root.
    // obj.setRoot(node);
    return node;
  }
  if (typeof vnode.type == 'function') {
    var fn = vnode.type(vnode.props);
    return createElement(fn);
  }
  var $el = vnode.type == 'Fragment' ? document.createDocumentFragment() : document.createElement(vnode.type);
  var theClassNames;
  var theEventKey;
  if (vnode.props) {
    //var html5 = "className" == prop ? "class" : prop;
    theClassNames = vnode.props['class'];
    if (theClassNames) {
      theClassNames = theClassNames.split(' '); //hack, get better way of obtaining names, this one only gets the first
      // theEventKey = theClassNames[0];
    }
  }

  //BACKTO
  for (var prop in vnode.props) {
    var html5 = 'className' == prop ? 'class' : prop;
    if ('children' == prop) continue;
    if ('dangerouslySetInnerHTML' == prop) {
      $el.innerHTML = vnode.props[prop];
      continue;
    }
    if (prop.indexOf('on') === 0) {
      $el.addEventListener(prop.substring(2), vnode.props[prop]);
      continue;
    } else if (vnode.props[prop] === null) {
      continue;
    } else {
      $el.setAttribute(html5, vnode.props[prop]);
    }
  }
  if (null != vnode.children) {
    vnode.children.map(createElement).forEach($el.appendChild.bind($el));
  }
  return $el;
}
View.createElement = createElement;

/**
 * JSX parsing function.
 */
function vNode(name, attributes) {
  attributes = attributes || {};
  var joined = [];
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }
  if (children.length == 0 || null == children[0] || typeof children[0] == 'undefined') {
    joined = [];
  } else if (children.length == 1 && typeof children[0] == 'string') {
    joined = children;
  } else {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        joined = joined.concat(children[i]);
      } else {
        joined.push(children[i]);
      }
    }
  }
  attributes.children = joined;
  var vnode = {
    type: name,
    props: attributes,
    children: joined
  };
  return vnode;
}
function refresh() {
  return _refresh.apply(this, arguments);
}
function _refresh() {
  _refresh = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var hash, params, _parseHash, _parseHash2, tree, c, elem;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _parseHash = parseHash(window.location.hash);
          _parseHash2 = _slicedToArray(_parseHash, 2);
          hash = _parseHash2[0];
          params = _parseHash2[1];
          elem = document.querySelector('#job-container');
          if (elem) {
            elem.removeEventListener('click', this.currentComponent);
          }
          if (hash == '' || hash == '#') {
            c = new JobList();
          } else if (hash == '#new') {
            c = new JobForm();
          } else if (hash.startsWith('#edit')) {
            c = new JobForm(params.id);
          } else if (hash.startsWith('#details')) {
            c = new JobSearch(params.id);
          }
          c.listenTo('click', '#job-container');
          /*
              Listen for submit events
              c.listenTo("submit", "#record-form");
              */
          if (!c.loadData) {
            _context3.next = 11;
            break;
          }
          _context3.next = 11;
          return c.loadData();
        case 11:
          tree = c.render();
          this.view.render(tree);
          this.currentComponent = c;
        case 14:
        case "end":
          return _context3.stop();
      }
    }, _callee3, this);
  }));
  return _refresh.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_ocdla_view_view_js.bundle.js.map